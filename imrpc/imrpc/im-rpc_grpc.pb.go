// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: im-rpc.proto

package imrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ImRPC_SendSingleMessage_FullMethodName = "/imrpc.ImRPC/SendSingleMessage"
)

// ImRPCClient is the client API for ImRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImRPCClient interface {
	SendSingleMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error)
}

type imRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewImRPCClient(cc grpc.ClientConnInterface) ImRPCClient {
	return &imRPCClient{cc}
}

func (c *imRPCClient) SendSingleMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*SendMessageResponse, error) {
	out := new(SendMessageResponse)
	err := c.cc.Invoke(ctx, ImRPC_SendSingleMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImRPCServer is the server API for ImRPC service.
// All implementations must embed UnimplementedImRPCServer
// for forward compatibility
type ImRPCServer interface {
	SendSingleMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error)
	mustEmbedUnimplementedImRPCServer()
}

// UnimplementedImRPCServer must be embedded to have forward compatible implementations.
type UnimplementedImRPCServer struct {
}

func (UnimplementedImRPCServer) SendSingleMessage(context.Context, *SendMessageRequest) (*SendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSingleMessage not implemented")
}
func (UnimplementedImRPCServer) mustEmbedUnimplementedImRPCServer() {}

// UnsafeImRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImRPCServer will
// result in compilation errors.
type UnsafeImRPCServer interface {
	mustEmbedUnimplementedImRPCServer()
}

func RegisterImRPCServer(s grpc.ServiceRegistrar, srv ImRPCServer) {
	s.RegisterService(&ImRPC_ServiceDesc, srv)
}

func _ImRPC_SendSingleMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImRPCServer).SendSingleMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImRPC_SendSingleMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImRPCServer).SendSingleMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ImRPC_ServiceDesc is the grpc.ServiceDesc for ImRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imrpc.ImRPC",
	HandlerType: (*ImRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSingleMessage",
			Handler:    _ImRPC_SendSingleMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "im-rpc.proto",
}
